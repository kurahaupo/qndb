#!/usr/bin/perl

use 5.010;
use strict;
use warnings;
use utf8;

use FindBin;
use lib "$FindBin::Bin", "$FindBin::Bin/../lib";

use Data::Dumper;

use Text::CSV;

use Carp 'croak', 'carp';

use string_with_components;

use verbose;

################################################################################

#use list_functions;

use PDF::scale_factors;

use CSV::gmail;
use CSV::qndb;
use CSV::adhoc1;
use CSV::adhoc2;

use M::IO qw(
              open_file_for_reading
              $force_overwrite
            );

################################################################################

use phone_functions;

################################################################################
#
# Process command-line options
#

########################################
# Output selections

our $do_diff = 0;
our $do_birthday_dump = 0;
our $do_diffable_dump = 0;
our $do_tag_report = 0;
our $do_qndb_map = 0;

my $output_name;

use run_options (
    'diff'                        => \$do_diff,
    'dump|diffable-dump'          => \$do_diffable_dump,
    'qndb-map'                    => \$do_qndb_map,

    'debug|x'                     => sub { set_verbose 'debug='.$_[-1] },
    'birthday-dump'               => \$do_birthday_dump,
    'output|o=s'                  => \$output_name,
    'quiet|q'                     => sub { set_verbose 0 },
    'tag-report'                  => \$do_tag_report,
    'v+'                          => \&set_verbose,
    'verbose=s'                   => \&set_verbose,
    'why-not|why-skipped'         => sub { set_verbose 'why='.$_[-1] },

    '#help|h'                     => <<EndOfHelp,
$0 --birthday-dump [ "generic" options ]...
$0 --book-{index|listing}-{all|by-{mm|wg}} [ "book", "pdf-output" & "generic" options ]...
$0 --diff [ "diff", "dump", "text-output" & "generic" options ]...
$0 --dump [ "dump", "text-output" & "generic" options ]...
$0 --labels [ "label", "pdf-output" & "generic" options ]...
$0 --qndb-map [ "qndb-map", "text-output" & "generic" options ]...

For additional options see:
    $0 --help-book
    $0 --help-diff
    $0 --help-dump
    $0 --help-labels
    $0 --help-qndb

    $0 --help-generic

    $0 --help-input
    $0 --help-selection
    $0 --help-tuning

    $0 --help-output
    $0 --help-pdf
EndOfHelp

    '#help-qndb'                  => <<EndOfHelp,
qndb-map-options (with --qndb-map):
    (none yet)
    (plus all "text-output" options)

See:
    $0 --help-output
    $0 --help-generic
EndOfHelp

    '#help-pdf'                   => <<EndOfHelp,
pdf-output-options
    --page-size={A0,A1,...,B0,B1,...}
    -A{0...9}  -B{0...9}                ISO paper sizes
    --page-height=LENGTH  --ph=LENGTH
    --page-width=LENGTH  --pw=LENGTH
EndOfHelp

    '#help-generic'                => <<EndOfHelp,
"generic" options:
    -v[v...] | --verbose | -q | --quiet
    -x | --debug                    enable debugging output
    --[no-]force-overwrite -f       clobber preexisting output files
    (also includes all "input", "record-selection" and "record-tuning" options)

See also:
    $0 --help-input
    $0 --help-selection
    $0 --help-tuning
EndOfHelp

    '#help-tuning'                => <<EndOfHelp,
"record-tuning" options:
       --canonical-addresses --no-raw-addresses     convert address elements to canonical abbreviations (e.g. Street -> St)
    --no-canonical-addresses    --raw-addresses     don't convert address elements to canonical abbreviations (e.g. Street -> St)
       --care-of                                    include 'c/-' where it would be inferred from the "type" field
    --no-care-of                                    omit 'c/-' where it would be inferred from the "type" field
EndOfHelp
);

my @ORIG_ARGV = @ARGV;

RunOptions;

$verbose and *STDOUT{IO}->autoflush(1);
$verbose and *STDERR{IO}->autoflush(1);

$verbose and warn sprintf "RUN: %s\n", join ' ', map { ! m{[^0-9A-Za-z!#%+,-./:=@^_~]|^\#} ? $_ : ! m/['\\]/ ? "'$_'" : ! m/["\\\$]/ ? '"'.$_.'"' : s{[^0-9A-Za-z!#%+,-./:=@^_~]}{\\$&}gr } $0, @ORIG_ARGV;

$why_not ||= $verbose > 2;

sub parse_file($) {
    my ( $in, $in_name, $fsep, $echar, $qchar ) = open_file_for_reading shift;

    my $filetype;
    $fsep ||= ',';
    $echar //= '"';
    $qchar //= '"';

    my $csv = Text::CSV::->new({ binary => 1, sep_char => $fsep, escape_char => $echar, quote_char => $qchar }) or die "Can't construct CSV reader; $!";

    my @headers = do {
            my $r0 = $csv->getline($in) or die "Can't get header line from $in_name\n";
            print "Read headers: " . Dumper($r0) if $verbose > 4 && $debug;
            $r0->[0] =~ s/^\x{fffe}// and die "Can't process $in_name -- starts with reverse BoM!\n";
            $r0->[0] =~ s/^\x{feff}// and warn "Ignoring leading BoM in $in_name\n";            # ignore Byte-Order-Mark
            $r0->[0] =~ s/^!// and warn "Ignoring leading ! in $in_name\n";     # a leading "!" may be used to force headers to sort to beginning of file
            if ($r0->[0] =~ /^%/) {
                $filetype = PDF::adhoc2::;
                # There is no "header row" as such, so the first row is actually structured data...
                $filetype->new(undef, $r0);
            }
            elsif ($r0->[0] eq 'uid') {
                $filetype = CSV::qndb::;
            }
            elsif ($r0->[0] eq 'Name') {
                $filetype = CSV::gmail::;
            }
            elsif ($r0->[0] eq 'inserts' ) {
                $filetype = CSV::adhoc1::;
            }
            else {
                die "Unknown file type, headers=[@$r0]\n";
            }
            map { s/\W+/_/g; lc $_ } @$r0;
        };
    warn "Parsed headers: " . Dumper(\@headers) if $verbose > 4 && $debug;

    my $num_lines = $. - 1;
    my @records;
    my %record_by_uid;
    my $fpos = tell $in;
    $! = 0;
    RECORD: while ( my $ra = $csv->getline($in) ) {
        $num_lines = $. - 1;
        print "Read line#$num_lines: " . Dumper($ra) if $verbose > 5 && $debug;
        my @r = $filetype->new(\@headers, $ra, $fpos);
        push @records, @r;
        $record_by_uid{$_->uid} = $_ for @r;
        $fpos = tell $in;
        $! = 0;
    }

    warn sprintf "READ: parsed %u records from %u lines in %s\n", scalar(@records), $num_lines, $in_name if $verbose;
    warn sprintf "READ: file position now at %#x in %s\n", tell($in), $in_name if $verbose > 1;
    close $in or die "Error while reading $in_name; $!\n";

    RECORD: for my $r ( @records ) {
        if ( $r->{ZREF_parents} || $r->{ZREF_children} ) {
            $r->{XREF_parents}  = delete $r->{ZREF_parents};
            $r->{XREF_children} = delete $r->{ZREF_children};
        } else {
            my $uid = $r->uid;
            for my $uid_of_kid ($r->uid_of_children_under_16) {
                my $k = $record_by_uid{$uid_of_kid} or next RECORD;
                push @{$k->{LIST_uids_of_parents}}, $uid;
                push @{$k->{XREF_parents}}, $r;
                push @{$r->{XREF_children}}, $k;
            }
            if (my ($uid_of_spouse) = $r->uid_of_spouse) {
                my $s = $record_by_uid{$uid_of_spouse} or do { warn sprintf "READ-XREF: uid#%s (%s) claims spouse uid#%s, who does not exist\n", $uid, $r->name, $uid_of_spouse; next; };
                $r->{XREF_spouse} = $s;
                $s->isa(CSV::Common::) or die "Not a CSV::Common record\n".Dumper($s);
                my ($s2uid) = $s->uid_of_spouse or do { warn sprintf "READ-XREF: uid#%s (%s) claims spouse uid#%s (%s), who claims no spouse\n", $uid, $r->name, $uid_of_spouse, $s->name; next; };
                $s2uid eq $uid or do { warn sprintf "READ-XREF: uid#%s (%s) claims spouse uid#%s (%s), who claims a different spouse uid#%s (%s)\n", $uid, $r->name, $uid_of_spouse, $s->name, $s2uid, eval { $record_by_uid{$s2uid}->name || "unnamed" } || "nonexistent"; next; };
                $s->{XREF_spouse} = $r;
            }
        }
    }

    warn sprintf "READ: cross-referenced %u records from %s\n", scalar @records, $in_name if $verbose;

    return \@records;
}

########################################
#
# Compute some derivative fallback values for parameters that can also be set
# on commandline
#

# Default exclusions for different generation types

use M::Diff;
use M::Book;
use M::Test;
use M::PostageLabels;

################################################################################

#
# Sanity-check command-line args
#

$do_test || $do_book || $do_diff || $do_birthday_dump || $do_diffable_dump || $do_tag_report || $do_labels || $do_qndb_map or die "Need at least one of: --book-* --labels --diff --dump --qndb-map\n";

#
# Actual work...
#

if ($do_test) {
    my $o = $output_name || ( $force_overwrite = -1,    # it's only a test file, after all;
                              'test.pdf' );
    generate_test( $o );
}
elsif ($do_diff) {
    $do_book || $do_birthday_dump || $do_diffable_dump || $do_tag_report || $do_labels || $do_qndb_map and die "Can't combine --diff with anything else\n";

    my $f1 = shift @ARGV;
    my $f2 = shift @ARGV || '-';
    @ARGV == 0 or die "Need two files (or one file and stdin) with --diff\n";
    my $rr1 = parse_file $f1;
    my $rr2 = parse_file $f2;
    generate_diff( $output_name, $rr1, $f1, $rr2, $f2 );
}
else {
    if (!@ARGV) {
        @ARGV = '-';
        $output_name ||= '-';
    }
    ! $output_name or
    $do_book + $do_labels + $do_birthday_dump + $do_diffable_dump + $do_tag_report + $do_qndb_map == 1 or die "Only one function allowed with --output\n";

    for my $a (@ARGV) {
        my $rr = parse_file $a;
        if ($do_book) {
            # Force overwrite if the output filename is related to (but not the same as) the input filename
            my $o = $output_name || ( $force_overwrite ||= -1, $a =~ s/(?:\.\w+|)$/-book.pdf/r );
            $o ne '-' && $o eq $a && $force_overwrite < 1 && die "Can't overwrite input file as output file\n";
            generate_book( $o, $rr, $a );
        }
        if ($do_labels) {
            # Force overwrite if the output filename is related to (but not the same as) the input filename
            my $o = $output_name || ( $force_overwrite ||= -1, $a =~ s/(?:\.\w+|)$/\.pdf/r );
            $o ne '-' && $o eq $a && $force_overwrite < 1 && die "Can't overwrite input file as output file\n";
            generate_labels( $o, $rr, $a );
        }
        if ($do_birthday_dump) {
            my $o = $output_name || '-';
            birthday_dump_records( $o, $rr, $a );
        }
        if ($do_diffable_dump) {
            my $o = $output_name || '-';
            diffably_dump_records( $o, $rr, $a );
        }
        if ($do_tag_report) {
            # Force overwrite if the output filename is related to (but not the same as) the input filename
            my $o = $output_name || '-';
            $o ne '-' && $o eq $a && $force_overwrite < 1 && die "Can't overwrite input file as output file\n";
            generate_tag_report( $o, $rr, $a );
        }
        if ($do_qndb_map) {
            # Force overwrite if the output filename is related to (but not the same as) the input filename
            my $o = $output_name || ( $force_overwrite ||= -1, $a =~ s/(?:\.\w+|)$/-qdb.csv/r );
            $o ne '-' && $o eq $a && $force_overwrite < 1 && die "Can't overwrite input file as output file\n";
            generate_qndb_map( $o, $rr, $a );
        }
    }
}

1;

__END__

Set the global mediabox                     Set the global cropbox                      Set the global bleedbox                     Set the global trimbox                      Set the global artbox

->mediabox($name)                           ->cropbox($name)                            ->bleedbox($name)                           ->trimbox($name)                            ->artbox($name)
->mediabox($width, $height)                 ->cropbox($width, $height)                  ->bleedbox($width, $height)                 ->trimbox($width, $height)                  ->artbox($width, $height)
->mediabox($left, $bottom, $right, $top)    ->cropbox($left, $bottom, $right, $top)     ->bleedbox($left, $bottom, $right, $top)    ->trimbox($left, $bottom, $right, $top)     ->artbox($left, $bottom, $right, $top)

Examples:

   $pdf->mediabox('A4');
   $pdf->mediabox(595, 842);
   $pdf->mediabox(0, 0, 595, 842);
