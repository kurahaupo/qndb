#!/bin/bash
shopt -s extglob
## line break needed here -- extglob has to preceed parsing
{
. $HOME/Quakers/lib/qlib.bash
: ${PAGER:='less -iR'}

true=1 false=0

day_offsets=()
diff_ignore_dir="${dbdir}DIFF/"
dumpopts=( --hide-send --skip-suppressed-listing )
glist=()
list_before=false
once=false
patch_files=()
plist=()
show_line_offsets=false
smart_diff=true
use_google=true
use_profile=true
vim_opts=()

__f_cp='\e[34;2m==== %s ====\e[49;0m\n'
__f_patch='\e[32m==== %s ====\e[49;0m\n'
__f_diff='\e[34m==== %s ====\e[49;0m\n'
__f_ls='\e[34m==== %s ====\e[49;0m\n'
__f_result='\e[41;1m==== %s ====\e[49;0m\n'

# Use process session ID so that each login shell keeps the same set of
# temporary files.
read psid < <( ps -p $$ -o sid= ) || psid=$$
temp=/tmp/csvdiff_$psid.

while (($#)) ; do
    case $1 in
    (--verbose=*|--patch=*|--offset-time=*) set -- "${1%%=*}" "${1#*=}" "${@:2}" ; continue ;;
    (--*=*)                     die EX_USAGE "Option '${1%%=*}' does not take a value" ;;

    (--after)                   list_before=false ;;
    (--before)                  list_before=true ;;
    (--bl|--baseline)           plist+=("$baseline_snapshot") ;;
    (--book|--book2014)         plist+=("$greenbook_snapshot") ;;
    (--hide-lines)              show_line_offsets=false ;;
    (--ignore)                  ignore=true ;;
    (--last-week)               day_offsets+=( 7 ) ;;
    (--loop)                    once=false ;;
    (--ng|--no-gmail)           use_google=false  ;;
    (--no-hide-lines)           show_line_offsets=true ;;
    (--no-show-lines)           show_line_offsets=false ;;
    (--np|--no-profile)         use_profile=false ;;
    (--offset-time)             day_offsets+=( "$2" ) ; shift ;;
    (--once)                    once=true ;;
    (--patch)                   patch_files+=( "$2" ) ; shift ;;
    (--show-lines)              show_line_offsets=true ;;
    (--smart)                   smart_diff=true ;;
    (--stupid)                  smart_diff=false ;;
    (--today)                   day_offsets+=( 0 ) ;;
    (--today)                   day_offsets+=( 0 ) ;;
    (--ug|--use-gmail)          use_google=true  ;;
    (--up|--use-profile)        use_profile=true ;;
    (--verbose)                 dump_opts+=("$1=$2") ; shift ;;
    (--yesterday)               day_offsets+=( 1 ) ;;
    (--+([0-9])-day?(s)?(-ago)) day_offsets+=( ${1//[^0-9]/} ) ;;
    (--+([0-9])-week?(s)?(-ago)) day_offsets+=( $(( 7 * ${1//[^0-9]/} )) ) ;;
    (-*)                        dumpopts+=( "$1" ) ;;
    (*/google*|google*)         glist+=( "$1" ) ;;
    (*/*\
    |*/profile*|profile*\
    |*/mma-book*)               plist+=( "$1" ) ;;
    (*)                         die EX_USAGE "Unknown option '$1'" ;;
    esac
    shift
done

((${#day_offsets[@]})) || day_offsets=( 0 )


(( ! ${#patch_files[@]} )) && {
  _def_patch_files=( ${dbdir}profiles*.patch )
  [[ -r ${_def_patch_files[0]} ]] &&
    patch_files=( "${_def_patch_files[@]}" )
}

echo "Day-offsets are: ${day_offsets[*]}"

mvs() { [[ -s "$1" ]] && { delay=true ; mv -vb "$1" "$2" ; } ; }

while
    $once || {
    printf 'Diff? '
    read x && [[ $x != @(n|no|q|quit|stop|exit) ]]
    }
do
    # update time-related vars to reflect "now" or "today"
    set_current_vars

    # make sure any new downloads are filed in proper locations
    file_downloads

        ff=()
    ((list_before)) &&
        ff+=( "${plist[@]}" )

        ff+=( "${glist[@]}" )
    ((use_google)) &&
        ff+=( "$current_gmail" )

    ((use_profile)) &&
    for t in "${day_offsets[@]}"
    do
        printf -v px "$pT" $((now-t*86400))
        ff+=( "$px" )
    done
    ((! list_before)) &&
        ff+=( "${plist[@]}" )

    ignore_opts=()
    diff_ignore_file=()
    if (( ignore ))
    then
        diff_ignore_file="${diff_ignore_dir}${ff[*]##*/}.ignore"
        diff_ignore_file="${diff_ignore_file//' '/:}"
        :>> "$diff_ignore_file"
        ignore_opts+=( --diff-ignore-file="$diff_ignore_file" )
        vim_opts+=( +':set nodiff foldcolumn=0 noscrollbind nocursorbind' )
    fi

    nff=${#ff[@]}
    if (( smart_diff && nff == 2 && ! ignore ))
    then
        if (( ${#patch_files[@]} ))
        then
            rm -f "$temp"*
            orig=${temp}base
            curr=$orig
            "${libdir}"csvdump --diff "${dumpopts[@]}" "${ignore_opts[@]}" "${ff[@]}" >"$orig" 2>&1 && {
                for pi in "${!patch_files[@]}"
                do
                    patch_file="${patch_files[pi]}"
                    fwd=${temp}fwd$pi
                    rev=${temp}rev$pi

                    printf "$__f_cp" "cp $curr $fwd"
                    cp -v "$curr" "$fwd" || exit  # inside pipeline
                    printf "$__f_patch" "patch $fwd $patch_file"
                    patch "$fwd" "$patch_file" || exit  # inside pipeline

                    printf "$__f_cp" "cp $fwd $rev"
                    cp -v "$fwd" "$rev" || exit  # inside pipeline
                    printf "$__f_patch" "patch -R $rev $patch_file"
                    patch -R "$rev" "$patch_file" || exit  # inside pipeline

                    printf "$__f_diff" "diff $curr $rev"
                    diff -s "$curr" "$rev" || exit  # inside pipeline

                    curr=$fwd
                done
            }

            rm -f "$temp"*~
            printf "$__f_ls" "ls -ldS $temp*"
            ls -ldS "$temp"*
            printf "$__f_result" "DIFFERENCES $curr"
            grep -Ev '^IGNORE' < "$curr" |
            cat -s
        else
            "${libdir}"csvdump --diff "${dumpopts[@]}" "${ignore_opts[@]}" "${ff[@]}"
        fi 2>&1 |
            if ((show_line_offsets))
            then
                cat
            else
                grep -vE '^Hunk #[0-9][0-9]* succeeded at [0-9][0-9]* \(offset -*[0-9][0-9]* lines*\)\.$'
            fi |
                tee "$temp".tee |
                ${PAGER} +/"^=.*DIFFERENCES.*=$"
    else
        ff=( "${diff_ignore_file[@]}" "${ff[@]}" ) nff=${#ff[@]}
        set -x
        for (( i=0 ; i<nff ; ++i )) do
            [[ ${ff[i]} = *.csv ]] || continue
            exec {fd}< <( "${libdir}"csvdump --dump "${dumpopts[@]}" "${ignore_opts[@]}" "${ff[i]}" 2>&1)
            fz[i]=$fd
            ff[i]=/proc/$BASHPID/fd/$fd
        done
        set +x
        vimdiff "${vim_opts[@]}" "${ff[@]}"
        for fd in ${fz[@]} ; do
            exec {fd}<&-
        done
    fi

    ((once)) && break
done

[[ -n $temp ]] && rm -fv "$temp"*
}
